from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage  # MemoryStorage - –º–æ–¥—É–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.handler import CancelHandler  # —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—à–∏–±–∫–∏
from aiogram.dispatcher.middlewares import BaseMiddleware
import datetime
import os  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv, find_dotenv  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
from sqlite import db_start, create_user


load_dotenv(find_dotenv())  # –Ω–∞—Ö–æ–¥–∏—Ç –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ .env
bot = Bot(os.getenv('TOKEN'))

store = MemoryStorage()  # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MemoryStorage (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
dp = Dispatcher(bot=bot, storage=store)

greeting = '''
‚öúÔ∏è<b>–ü—Ä–∏–≤–µ—Ç, <i>{}!</i></b>‚öúÔ∏è
–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–ª—É—á—à–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º. 
–ü–æ–∫–∞ —è –Ω–µ –æ–±–ª–∞–¥–∞—é –±–æ–ª—å—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, –Ω–æ –≤—Å–µ –ø–æ–ø—Ä–∞–≤–∏–º–æ!)'''
navigation = '''
–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
    <b>/help</b> - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö ‚öôÔ∏è
    <b>/suma</b> - –ø—Ä–æ—Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–∞ ‚ûï
    <b>/id</b> - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id TelegramüïµÔ∏è
    <b>/ip</b> - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å üåê
    <b>/cancel</b> - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå*
'''


class ClientsStateGroup(StatesGroup):  # –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    count_sum = State()


class Middleware(BaseMiddleware):
    async def on_post_process_update(self, update: types.Update, result, data: dict) -> None:
        # –µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ–≥–æ
        if 'text' not in dict(update['message']).keys():
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–º –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ–≥–æ –º—ã –∏ –Ω–µ –±—É–¥–µ–º
            await update.message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –º–µ–Ω—è –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö...')
            CancelHandler()


def get_keyboard() -> types.ReplyKeyboardMarkup():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # resize_keyboard - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–º–µ—Ä

    helps = types.KeyboardButton('/help')
    adder = types.KeyboardButton('/suma')
    tg_identifier = types.KeyboardButton('/id')
    id_identifier = types.KeyboardButton('/ip')

    return keyboard.add(helps).add(adder).add(tg_identifier).add(id_identifier)


def get_cancel() -> types.ReplyKeyboardMarkup():
    cancel = types.KeyboardButton('/cancel')
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add(cancel)


async def date_on_info(_) -> None:
    my_name = await bot.get_me()
    print(my_name.first_name)
    print(f'–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω {datetime.datetime.today().strftime("%d %b %Y–≥. –≤ %H:%M")}')
    await db_start()  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î


@dp.message_handler(commands=['start'])
async def start(message: types.Message) -> None:
    await message.delete()
    await message.answer(greeting.format(message.from_user.first_name) + navigation,
                         parse_mode='HTML',
                         reply_markup=get_keyboard())
    await create_user(message.from_user.id, message.from_user.username)


@dp.message_handler(commands=['help'])
async def get_info(message: types.Message) -> None:
    await message.delete()
    await message.answer(navigation, parse_mode='HTML')


@dp.message_handler(commands=['id'])
async def id_helper(message: types.Message) -> None:
    await message.delete()
    await message.answer(f'–¢–≤–æ–π ID:{message.from_user.id}')


@dp.message_handler(commands=['ip'])
async def ip_helper(message: types.Message) -> None:
    await message.delete()
    ikb = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(text='IP-API', url='http://ip-api.com/json'))
    await message.answer('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å IP –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ', reply_markup=ikb)


@dp.message_handler(commands=['suma'])
async def suma(message: types.Message):
    await ClientsStateGroup.count_sum.set()
    await message.delete()
    await message.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=get_cancel())


# –î–∞–Ω–Ω—ã–π handler —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
@dp.message_handler()
async def simple_handler(message: types.Message) -> None:
    await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –º–µ–Ω—è –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...', reply_markup=get_keyboard())


@dp.message_handler(state=ClientsStateGroup.count_sum)
async def count_sum(message: types.Message, state: FSMContext) -> None:
    if message.text == '/cancel':
        await state.finish()
        await message.delete()
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=get_keyboard())
        return
    try:
        string = [float(x) for x in message.text.split()]
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        return
    await state.finish()
    await message.answer(f'{" + ".join(message.text.split())} = {sum(string)}', reply_markup=get_keyboard())


dp.middleware.setup(Middleware())
executor.start_polling(dp, skip_updates=True, on_startup=date_on_info)  # skip_updates - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è,
# —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ–≥–¥–∞ –±–æ—Ç –±—ã–ª –≤ offline —Ä–µ–∂–∏–º–µ;
# on_startup - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
